// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// don't need the complete db modal here

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  company       String?
  JobTitle      String?
  accounts      Account[]
  spaces        Space[]  // Relation to spaces
  createdAt   DateTime @default(now())  // Automatically set on creation
  updatedAt   DateTime @updatedAt       // Automatically updated on each update
 
  @@map("users")  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String  @id @default(cuid())
  email     String  @unique
  token     String  @unique
  expires   DateTime

  @@unique([email,token])
}


model Space {
  id        String       @id @default(cuid())
  slug      String       @unique
  name      String 
  userId    String
  createdAt DateTime     @default(now()) // Automatically set on creation
  updatedAt DateTime     @updatedAt      // Automatically updated on each update

  user      User         @relation(fields: [userId], references: [id])
  details   SpaceDetails? @relation

  detailsId String? // Foreign key to SpaceDetails
}

model SpaceDetails {
  id                  String   @id @default(cuid())
  spaceId             String   @unique

  // Fields for coverPage
  coverPageTitle      String
  coverPageDescription   String
  coverPageImageUrl   String?
  coverPageBtnText    String

  // Fields for userInformation
  userPhoto           Boolean
  userFirstName       Boolean 
  userLastName        Boolean
  userEmail           Boolean 
  userJobTitle        Boolean
  userCompany         Boolean

  // Fields for testimonialType
  testimonialTextType   Boolean 
  testimonialVideoType   Boolean 

  // Fields for testimonialPageType
  testimonialPageTitle      String
  testimonialPageDescription   String
  tags                String[]
  questionHeader      String
  questions           String[]

  // Fields for thankyou
  thankyouTitle       String
  thankyouMessage     String

  // Fields for design
  theme               Int 
  btnColor            String

  createdAt           DateTime @default(now()) // Automatically set on creation
  updatedAt           DateTime @updatedAt      // Automatically updated on each update

  space Space @relation(fields: [spaceId], references: [id]) // Link back to Space
}
